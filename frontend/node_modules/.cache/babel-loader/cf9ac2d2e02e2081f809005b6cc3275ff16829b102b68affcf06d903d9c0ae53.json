{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Aayush\\\\Documents\\\\FinApp\\\\frontend\\\\src\\\\Components\\\\CompanyProfile\\\\CompanyProfile.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useOutletContext } from 'react-router-dom';\nimport { getKeyMetrics } from '../../api';\nimport RatioList from '../RatioList/RatioList';\nimport Spinner from '../Spinners/Spinners';\nimport { formatLargeNonMonetaryNumber, formatRatio } from '../../Helpers/NumberFormatting';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst tableConfig = [{\n  label: \"Market Cap\",\n  render: company => formatLargeNonMonetaryNumber(company.marketCap),\n  subTitle: \"Total value of all a company's shares of stock\"\n}, {\n  label: \"Current Ratio\",\n  render: company => formatRatio(company.currentRatioTTM),\n  subTitle: \"Measures the companies ability to pay short term debt obligations\"\n}, {\n  label: \"Return On Equity\",\n  render: company => formatRatio(company.returnOnEquityTTM),\n  subTitle: \"Return on equity is the measure of a company's net income divided by its shareholder's equity\"\n}, {\n  label: \"Return On Assets\",\n  render: company => formatRatio(company.returnOnTangibleAssetsTTM),\n  subTitle: \"Return on assets is the measure of how effective a company is using its assets\"\n}, {\n  label: \"EV to EBITDA TTM\",\n  render: company => formatRatio(company.evToEBITDATTM),\n  subTitle: \"How many times the company's EBITDA investors are paying through its enterprise value.\"\n}, {\n  label: \"Free Cash Flow Yield TTM\",\n  render: company => formatRatio(company.freeCashFlowYieldTTM),\n  subTitle: \"Percentage of a company’s market value generated as free cash flow.\"\n}, {\n  label: \"Capex to Revenue TTM\",\n  render: company => formatRatio(company.capexToRevenueTTM),\n  subTitle: \"Indicates what portion of a company's revenue is being reinvested in capital expenditures.\"\n}, {\n  label: \"Graham Number\",\n  render: company => formatRatio(company.grahamNumberTTM),\n  subTitle: \"This is the upperbound of the price range that a defensive investor should pay for a stock\"\n}];\nconst CompanyProfile = props => {\n  _s();\n  const ticker = useOutletContext();\n  const [companyData, setCompanyData] = useState();\n  useEffect(() => {\n    const getCompanyKeyMetrics = async () => {\n      const value = await getKeyMetrics(ticker);\n      setCompanyData(value === null || value === void 0 ? void 0 : value.data[0]);\n    };\n    getCompanyKeyMetrics();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: companyData ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(RatioList, {\n        data: companyData,\n        config: tableConfig\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 5\n      }, this)\n    }, void 0, false) : /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n};\n_s(CompanyProfile, \"oIWvfb9RHbVWP9I9E1ZAfgq5EdY=\", false, function () {\n  return [useOutletContext];\n});\n_c = CompanyProfile;\nexport default CompanyProfile;\nvar _c;\n$RefreshReg$(_c, \"CompanyProfile\");","map":{"version":3,"names":["React","useEffect","useState","useOutletContext","getKeyMetrics","RatioList","Spinner","formatLargeNonMonetaryNumber","formatRatio","jsxDEV","_jsxDEV","Fragment","_Fragment","tableConfig","label","render","company","marketCap","subTitle","currentRatioTTM","returnOnEquityTTM","returnOnTangibleAssetsTTM","evToEBITDATTM","freeCashFlowYieldTTM","capexToRevenueTTM","grahamNumberTTM","CompanyProfile","props","_s","ticker","companyData","setCompanyData","getCompanyKeyMetrics","value","data","children","config","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Aayush/Documents/FinApp/frontend/src/Components/CompanyProfile/CompanyProfile.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { CompanyKeyMetrics } from '../../company';\r\nimport { useOutletContext } from 'react-router-dom';\r\nimport { getKeyMetrics } from '../../api';\r\nimport RatioList from '../RatioList/RatioList';\r\nimport Spinner from '../Spinners/Spinners';\r\nimport { formatLargeNonMonetaryNumber, formatRatio } from '../../Helpers/NumberFormatting';\r\n\r\ntype Props = {}\r\n\r\nconst tableConfig = [\r\n  {\r\n    label: \"Market Cap\",\r\n    render: (company: CompanyKeyMetrics) =>\r\n      formatLargeNonMonetaryNumber(company.marketCap),\r\n    subTitle: \"Total value of all a company's shares of stock\",\r\n  },\r\n  {\r\n    label: \"Current Ratio\",\r\n    render: (company: CompanyKeyMetrics) =>\r\n      formatRatio(company.currentRatioTTM),\r\n    subTitle:\r\n      \"Measures the companies ability to pay short term debt obligations\",\r\n  },\r\n  {\r\n    label: \"Return On Equity\",\r\n    render: (company: CompanyKeyMetrics) => \r\n      formatRatio(company.returnOnEquityTTM),\r\n    subTitle:\r\n      \"Return on equity is the measure of a company's net income divided by its shareholder's equity\",\r\n  },\r\n  {\r\n    label: \"Return On Assets\",\r\n    render: (company: CompanyKeyMetrics) =>\r\n      formatRatio(company.returnOnTangibleAssetsTTM),\r\n    subTitle:\r\n      \"Return on assets is the measure of how effective a company is using its assets\",\r\n  },\r\n  {\r\n    label: \"EV to EBITDA TTM\",\r\n    render: (company: CompanyKeyMetrics) =>\r\n      formatRatio(company.evToEBITDATTM),\r\n    subTitle:\r\n      \"How many times the company's EBITDA investors are paying through its enterprise value.\",\r\n  },\r\n  {\r\n    label: \"Free Cash Flow Yield TTM\",\r\n    render: (company: CompanyKeyMetrics) =>\r\n      formatRatio(company.freeCashFlowYieldTTM),\r\n    subTitle:\r\n      \"Percentage of a company’s market value generated as free cash flow.\",\r\n  },\r\n  {\r\n    label: \"Capex to Revenue TTM\",\r\n    render: (company: CompanyKeyMetrics) =>\r\n      formatRatio(company.capexToRevenueTTM),\r\n    subTitle: \"Indicates what portion of a company's revenue is being reinvested in capital expenditures.\",\r\n  },\r\n\r\n  {\r\n    label: \"Graham Number\",\r\n    render: (company: CompanyKeyMetrics) =>\r\n      formatRatio(company.grahamNumberTTM),\r\n    subTitle:\r\n      \"This is the upperbound of the price range that a defensive investor should pay for a stock\",\r\n  },\r\n\r\n];\r\n\r\nconst CompanyProfile = (props: Props) => {\r\n  const ticker = useOutletContext<string>()\r\n  const [companyData, setCompanyData] = useState<CompanyKeyMetrics>()\r\n  useEffect(() => {\r\n    const getCompanyKeyMetrics = async() => {\r\n      const value = await getKeyMetrics(ticker)\r\n      setCompanyData(value?.data[0])\r\n    }\r\n    getCompanyKeyMetrics()\r\n  }, [])\r\n  return (\r\n  <>\r\n  { companyData ? (\r\n    <>\r\n    <RatioList data={companyData} config={tableConfig} />\r\n    \r\n    </>\r\n  ) : ( \r\n    <Spinner/> \r\n  )}\r\n \r\n   \r\n   </>\r\n\r\n  )\r\n}\r\n\r\nexport default CompanyProfile"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}