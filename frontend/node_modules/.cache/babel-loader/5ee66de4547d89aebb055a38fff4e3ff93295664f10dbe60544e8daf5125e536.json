{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Aayush\\\\Documents\\\\FinApp\\\\frontend\\\\src\\\\Components\\\\IncomeStatement\\\\IncomeStatement.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useOutletContext } from 'react-router-dom';\nimport { getIncomeStatement } from '../../api';\nimport Table from '../Table/Table';\nimport Spinner from '../Spinners/Spinners';\nimport { formatLargeMonetaryNumber, formatRatio } from \"../../Helpers/NumberFormatting\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst configs = [{\n  label: \"Date\",\n  render: company => company.date\n}, {\n  label: \"Revenue\",\n  render: company => formatLargeMonetaryNumber(company.revenue)\n}, {\n  label: \"Cost Of Revenue\",\n  render: company => formatLargeMonetaryNumber(company.costOfRevenue)\n}, {\n  label: \"Depreciation\",\n  render: company => formatLargeMonetaryNumber(company.depreciationAndAmortization)\n}, {\n  label: \"Operating Income\",\n  render: company => formatLargeMonetaryNumber(company.operatingIncome)\n}, {\n  label: \"Income Before Taxes\",\n  render: company => formatLargeMonetaryNumber(company.incomeBeforeTax)\n}, {\n  label: \"Net Income\",\n  render: company => formatLargeMonetaryNumber(company.netIncome)\n}, {\n  label: \"Earnings Per Share\",\n  render: company => formatRatio(company.eps)\n}, {\n  label: \"Earnings Per Diluted \",\n  render: company => formatRatio(company.epsdiluted)\n}, {\n  label: \"Income Tax Expense\",\n  render: company => formatLargeMonetaryNumber(company.incomeTaxExpense)\n}];\nconst IncomeStatement = props => {\n  _s();\n  const ticker = useOutletContext();\n  const [incomeStatement, setIncomeStatement] = useState();\n  useEffect(() => {\n    const incomeStatementFetch = async () => {\n      const result = await getIncomeStatement(ticker);\n      setIncomeStatement(result.data);\n    };\n    incomeStatementFetch();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: incomeStatement ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        config: configs,\n        data: incomeStatement\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 7\n      }, this)\n    }, void 0, false) : /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 10\n    }, this)\n  }, void 0, false);\n};\n_s(IncomeStatement, \"EWkRNnPJ/dbjI8Gcx0h5nwXmoyA=\", false, function () {\n  return [useOutletContext];\n});\n_c = IncomeStatement;\nexport default IncomeStatement;\nvar _c;\n$RefreshReg$(_c, \"IncomeStatement\");","map":{"version":3,"names":["React","useEffect","useState","useOutletContext","getIncomeStatement","Table","Spinner","formatLargeMonetaryNumber","formatRatio","jsxDEV","_jsxDEV","Fragment","_Fragment","configs","label","render","company","date","revenue","costOfRevenue","depreciationAndAmortization","operatingIncome","incomeBeforeTax","netIncome","eps","epsdiluted","incomeTaxExpense","IncomeStatement","props","_s","ticker","incomeStatement","setIncomeStatement","incomeStatementFetch","result","data","children","config","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Aayush/Documents/FinApp/frontend/src/Components/IncomeStatement/IncomeStatement.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { CompanyIncomeStatement } from '../../company';\r\nimport { useOutletContext } from 'react-router-dom';\r\nimport { getIncomeStatement } from '../../api';\r\nimport Table from '../Table/Table';\r\nimport Spinner from '../Spinners/Spinners';\r\nimport {\r\n  formatLargeMonetaryNumber,\r\n  formatRatio,\r\n} from \"../../Helpers/NumberFormatting\";\r\n\r\n\r\ntype Props = {}\r\n\r\nconst configs = [\r\n  {\r\n    label: \"Date\",\r\n    render: (company: CompanyIncomeStatement) => company.date,\r\n  },\r\n  {\r\n    label: \"Revenue\",\r\n    render: (company: CompanyIncomeStatement) =>  formatLargeMonetaryNumber(company.revenue),\r\n  },\r\n  {\r\n    label: \"Cost Of Revenue\",\r\n    render: (company: CompanyIncomeStatement) =>  formatLargeMonetaryNumber(company.costOfRevenue),\r\n  },\r\n  {\r\n    label: \"Depreciation\",\r\n    render: (company: CompanyIncomeStatement) => formatLargeMonetaryNumber(company.depreciationAndAmortization),\r\n  },\r\n  {\r\n    label: \"Operating Income\",\r\n    render: (company: CompanyIncomeStatement) =>  formatLargeMonetaryNumber(company.operatingIncome),\r\n  },\r\n  {\r\n    label: \"Income Before Taxes\",\r\n    render: (company: CompanyIncomeStatement) =>  formatLargeMonetaryNumber(company.incomeBeforeTax),\r\n  },\r\n  {\r\n    label: \"Net Income\",\r\n    render: (company: CompanyIncomeStatement) =>  formatLargeMonetaryNumber(company.netIncome),\r\n  },\r\n  {\r\n    label: \"Earnings Per Share\",\r\n    render: (company: CompanyIncomeStatement) => formatRatio(company.eps),\r\n  },\r\n  {\r\n    label: \"Earnings Per Diluted \",\r\n    render: (company: CompanyIncomeStatement) =>  formatRatio(company.epsdiluted),\r\n  },\r\n  {\r\n    label: \"Income Tax Expense\",\r\n    render: (company: CompanyIncomeStatement) => formatLargeMonetaryNumber(company.incomeTaxExpense),\r\n  },\r\n\r\n];\r\n\r\nconst IncomeStatement = (props: Props) => {\r\n  const ticker = useOutletContext<string>()\r\n  const [incomeStatement, setIncomeStatement] = useState<CompanyIncomeStatement[]>()\r\n    useEffect(() =>{\r\n      const incomeStatementFetch = async () => {\r\n        const result = await getIncomeStatement(ticker)\r\n        setIncomeStatement(result!.data)\r\n      }\r\n      incomeStatementFetch()\r\n    }, [])\r\n\r\n  return (\r\n    <>\r\n    {incomeStatement  ? ( \r\n      <>\r\n      <Table config={configs} data = {incomeStatement} />\r\n      </> \r\n      ): (\r\n         <Spinner/> \r\n         )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default IncomeStatement"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}